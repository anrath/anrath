import feedparser
import re

def parse_letterboxd_rss(user_name, include_styling=True, columns=3, show_rewatch=False, only_show_reviewed=False):
    # Construct the RSS feed URL
    rss_url = f"https://letterboxd.com/{user_name}/rss/"
    
    # Parse the RSS feed
    feed = feedparser.parse(rss_url)
    
    # Initialize an empty string to store the markdown content
    html_output = f"<style>td {{ padding: 10px; vertical-align: top; text-align: center; }}</style>\n" if include_styling else ""
    
    # Start the table
    html_output += "<table>\n"
    
    # Iterate through each entry in the RSS feed and format it
    for index, entry in enumerate(feed.entries):
        if index % columns == 0:
            html_output += "  <tr>\n"
        
        title = entry.title
        link = entry.link

        if f"https://letterboxd.com/{user_name}/list/" in link:
            # Skip the user creating lists
            continue

        watched_date = entry.get('letterboxd_watcheddate', 'N/A')
        rewatch = entry.get('letterboxd_rewatch', 'No')
        film_title = entry.get('letterboxd_filmtitle', 'Unknown')
        film_year = entry.get('letterboxd_filmyear', 'Unknown')
        rating = entry.get('letterboxd_memberrating', 'N/A')
        description = entry.description if 'description' in entry else 'No description available'
        description_cleaned = re.sub(r'<img[^>]+>', '', description)  # This removes any image tags
        
        # Check for autogenerated text when a movie has no review
        pattern = r"Watched on (Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday) (January|February|March|April|May|June|July|August|September|October|November|December) \d{1,2}, \d{4}\."
        if re.search(pattern, description_cleaned.strip()):
            if only_show_reviewed:
                continue
            description_cleaned = ''
        
        # Convert the rating to stars (supporting half-stars and empty stars to total five stars)
        if rating != 'N/A':
            full_stars = int(float(rating))
            half_star = (float(rating) - full_stars) >= 0.5
            empty_stars = 5 - full_stars - (1 if half_star else 0)
            star_rating = "★" * full_stars
            if half_star:
                star_rating += '½'
            # star_rating += "☆" * empty_stars
        else:
            star_rating = ''
        
        image_url = entry.description.split('src=')[1].split(' ')[0].strip('"')
        
        # Format each movie as a table cell
        html_output += f"    <td>\n"
        html_output += f"      <a href='{link}'><img src='{image_url}' width='150'/></a><br/>\n"
        html_output += f'<strong><a href="{link}" target="_blank">{film_title} ({film_year})</a></strong><br/>\n'
        html_output += f"      {star_rating}<br/>\n"
        if show_rewatch:
            html_output += f"      <small>Rewatch: {'Yes' if rewatch == 'Yes' else 'No'}</small><br/>\n"
        html_output += f"      <small>Watched on: {watched_date}</small><br/>\n"
        if description_cleaned:
            html_output += f"      <blockquote>{description_cleaned.strip()}</blockquote>\n"
        html_output += "    </td>\n"
        
        if (index + 1) % columns == 0 or index == len(feed.entries) - 1:
            html_output += "  </tr>\n"
    
    # Close the table
    html_output += "</table>\n"
    
    return html_output


